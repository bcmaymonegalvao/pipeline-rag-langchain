#!/usr/bin/env python3
"""
Script para inicializar a aplica√ß√£o RAG Streamlit
Inclui verifica√ß√£o de depend√™ncias e configura√ß√µes otimizadas
"""

import os
import sys
import subprocess
import platform

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        sys.exit(1)
    else:
        print(f"‚úÖ Python {sys.version.split()[0]} detectado")

def install_requirements():
    """Instala as depend√™ncias necess√°rias"""
    try:
        print("üì¶ Verificando depend√™ncias...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt", "--quiet"
        ])
        print("‚úÖ Depend√™ncias instaladas/verificadas")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        print("üí° Tente executar manualmente: pip install -r requirements.txt")
        sys.exit(1)

def set_environment():
    """Configura vari√°veis de ambiente para otimiza√ß√£o"""
    
    # Configura√ß√µes para otimizar performance em CPU
    os.environ["TOKENIZERS_PARALLELISM"] = "false"
    os.environ["OMP_NUM_THREADS"] = "4"
    
    # Configura√ß√µes do HuggingFace
    os.environ["TRANSFORMERS_CACHE"] = "./models_cache"
    os.environ["HF_HOME"] = "./models_cache"
    
    print("‚öôÔ∏è Vari√°veis de ambiente configuradas")

def run_streamlit():
    """Executa a aplica√ß√£o Streamlit"""
    try:
        print("üöÄ Iniciando aplica√ß√£o Streamlit...")
        print("üåê A aplica√ß√£o ser√° aberta em: http://localhost:8501")
        print("‚èπÔ∏è Para parar, pressione Ctrl+C\n")
        
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", "app.py",
            "--server.port", "8501",
            "--server.address", "0.0.0.0",
            "--browser.gatherUsageStats", "false",
            "--theme.base", "light"
        ])
        
    except KeyboardInterrupt:
        print("\nüëã Aplica√ß√£o finalizada pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro ao executar aplica√ß√£o: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Inicializando Pipeline RAG LangChain")
    print("=" * 50)
    
    # Verifica√ß√µes e configura√ß√µes
    check_python_version()
    set_environment()
    install_requirements()
    
    print("=" * 50)
    
    # Verificar se o arquivo principal existe
    if not os.path.exists("app.py"):
        print("‚ùå Arquivo app.py n√£o encontrado!")
        print("üí° Certifique-se de que app.py est√° no diret√≥rio atual")
        sys.exit(1)
    
    # Executar aplica√ß√£o
    run_streamlit()

if __name__ == "__main__":
    main()